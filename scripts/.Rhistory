axis.text.y.left = element_text(size = 10,
color = "black")) +
scale_y_continuous(limits = c(NA, NA),
expand = c(0, 0)) +
scale_x_continuous(limits = c(1990, 2022),
expand = c(0, 0)) +
theme_pubr()  # Apply clean theme
print(p)
}
# Identify species present in >4 unique years
species_years <- aggregate(year ~ sp_common_name_uppercase_IBP, # specify header
bird_territories_with_traits, # specify data
function(x) length(unique(x))) # identify unique year
# Specify list of species to exclude from analyses (i.e., late nesters, raptors,
# shorebirds, secretive wetland birds, colonial nesters)
species_to_exclude <- c(
"American Goldfinch", # summer breeder
"Cedar Waxwing", # late breeder
"Brown-headed Cowbird", # brood parasite
"Blue Jay", # shifting territories
"Common Grackle", # semi-colonial nester
"European Starling", # can be colonial, not territorial
"Red-tailed Hawk", # large territory
"Killdeer", # shorebird
"Red-winged Blackbird") # semi-colonial nester
# Exclude certain species, guilds, etc.
species_to_keep <- bird_territories_with_traits %>% # specify data set
group_by(sp_common_name_uppercase_IBP) %>% # specify grouping header
summarise(n_years = n_distinct(year), # summarize by unique years
guild = first(habitat_guild_BOTW)) %>%   # guild is unique
filter(n_years > 4, # specify number of required unique years
!sp_common_name_uppercase_IBP %in% species_to_exclude, # specify sp.
!guild %in% c("lakes and ponds", "marshes", "shorelines")) %>% #guild
pull(sp_common_name_uppercase_IBP) # identify species names
# Develop filtered list for species to keep for analyses
data_filtered <- bird_territories_with_traits %>% # specify data set
filter(sp_common_name_uppercase_IBP %in% species_to_keep) # specify filters
# Develop list and data frame items for models and predictions respectively
species_models <- list() # create empty list
species_predictions <- data.frame() # create empty data frame
species_list <- unique(data_filtered$sp_common_name_uppercase_IBP) # create list
# loop species to fit GAMM
for (sp in species_list) { # specify loop for species
sp_data <- subset(data_filtered, # specify filtered list
sp_common_name_uppercase_IBP == sp) # subset for species
fit <- tryCatch({ # specify error messages in model
gamm(territories ~ s(year, k = 5), # specify response variable and smoother
random = list(sitecode = ~1), # specify site as random effect
data = sp_data) # specify data set
},
error = function(e) { # specify error messages in model
message(paste("Error fitting species:", # specify error notice 1/3
sp, # specify error notice 2/3
" - skipping.")) # specify error notice 3/3
return(NULL) # specify alternative error notice
}) # avoids stopping loop in fitting GAMM
if (!is.null(fit)) { # specify if statement
species_models[[sp]] <- fit # if statement for successful model fits
new_years <- seq(min(sp_data$year), # specify year minimum
max(sp_data$year), # specify year maximum
length.out = 100) # create predictions
newdata <- data.frame(year = new_years, # specify year data set
sitecode = NA)  # smoother for sitecode
pred <- predict(fit$gam, # create predicted fitted values
newdata = newdata, # specify data set
type = "response", # specify as response variable
se.fit = TRUE) # create standard errors
sp_pred <- data.frame(sp_common_name_uppercase_IBP = sp, # specify species
year = new_years, # specify years
fit = pred$fit, # create predicted fitted values
se = pred$se.fit) # create standard errors
species_predictions <- rbind(species_predictions, # group predictions
sp_pred) # specify unique species
}
}
View(bird_territories_with_traits)
m1_nb <- gam(territories ~ s(year, k=10) +
s(sitecode, bs="re") +
s(species_4code_IBP, bs="re"),
data = bird_territories_with_traits,
family = nb(link="log"),
method = "REML")
# Remove all existing data from the Environment with 'rm' function
rm(list = ls())  # remove all objects
# Identify the working directory for analyses
getwd() # view working directory filepath
# Check version of R for script
R.version.string # version R check
# To reduce unnecessary loading, run 'options' function
options(warn = -1)  # suppress warnings if packages are already loaded
# List required packages (listed alphabetically for ease of use/revision)
list.of.packages <- c(
"broom",        # organize model outputs into tidy data frames
"dplyr",        # data manipulation and wrangling
"DT",           # data table selection
"forcats",      # handling and reordering factor variables
"gamm4",        # generalized additive mixed models (GAMMs)
"ggplot2",      # plotting and custom visualizations
"ggpubr",       # publisher-quality visualizations
"ggrepel",      # avoid label overlap in ggplot2
"ggtext",       # enhanced text formatting in ggplot2
"grid",         # base R graphics system for layout control
"htmlwidgets",  # customizable interactive visualizations
"lme4",         # linear and generalized linear mixed models
"mgcv",         # flexible smoothing with generalized additive models (GAMs)
"patchwork",    # combine multiple ggplots into one layout
"pheatmap",     # heatmap design and customization
"plotly",       # interactive ggplot options and visualizations
"purrr",        # functional programming for lists and vectors
"stringr",      # string manipulation and regex handling
"tibble",       # modern data frames with better printing
"tidyr",        # data cleaning and reshaping
"tidytext",     # text mining and analysis with tidy data
"tidyverse",    # collection of data science packages
"vegan")        # ecological statistics and ordination methods
# Create function to install packages if they are missing from the library
install_if_missing <- function(pkg) { # specify new function
if (!requireNamespace(pkg, quietly = TRUE)) install.packages(pkg) # if clause
} # creates new function for new package installs
# Install missing packages
lapply(list.of.packages, # vector of listed packages
install_if_missing) # use created function for installing packages
# Load required packages
lapply(list.of.packages, # vector of listed packages
library, # identify the r library
character.only = TRUE) # run characters
# Import data from csv file
bird_territories <- read.csv("../data/bird_species_territories_v1.csv", # data
header = T) # specify data headers
# Check for missing values within the data
any(is.na(bird_territories)) # identify if any data are 'n.a.' or missing
# Identify summary information about the data (e.g., mean, median, min and max)
summary(bird_territories) # Summarize key information within the dataset
# Import data from csv file, saved in the 'data' sub-folder of the rproject
bird_traits <- read.csv("../data/bird_species_traits_v2.csv", # specify data
header = T) # specify data headers
# Check for missing values within the data
any(is.na(bird_traits)) # identify if any data are 'n.a.' or missing
# Identify summary information about the data (e.g., mean, median, min and max)
summary(bird_traits) # summarize key information within the dataset
# Import data from csv file, saved in the 'data' sub-folder of the rproject
site_traits <- read.csv("../data/site_env_characteristics_v1.csv", # data set
header = T) # specify data headers
# Check for missing values within the data
any(is.na(site_traits)) # identify if any data are 'n.a.' or missing
# Identify summary information about the data (e.g., mean, median, min and max)
summary(site_traits) # Summarize key information within the dataset
bird_territories_with_traits <- full_join(bird_territories, # specify data
bird_traits, # specify data
by = c("species_4code_IBP")) # join
bird_territories_with_traits <- full_join(bird_territories_with_traits,
site_traits, # specify data
by = c("sitecode")) # specify join
m1_nb <- gam(territories ~ s(year, k=10) +
s(sitecode, bs="re") +
s(species_4code_IBP, bs="re"),
data = bird_territories_with_traits,
family = nb(link="log"),
method = "REML")
str(bird_territories_with_traits)
bird_territories_with_traits$year <- as.numeric(bird_territories_with_traits$year)
bird_territories_with_traits$sitecode <- as.factor(bird_territories_with_traits$sitecode)
bird_territories_with_traits$species_4code_IBP <- as.factor(bird_territories_with_traits$species_4code_IBP)
m1_nb <- gam(territories ~ s(year, k=10) +
s(sitecode, bs="re") +
s(species_4code_IBP, bs="re"),
data = bird_territories_with_traits,
family = nb(link="log"),
method = "REML")
# Create new data frame for prediction
newdata <- expand.grid(
year = seq(min(df$year), max(df$year), by=1),
sitecode = NA,  # Will average over random effects
species = levels(df$species_4code_IBP)
)
# Create new data frame for prediction
newdata <- expand.grid(
year = seq(min(m1_nb$year), max(m1_nb$year), by=1),
sitecode = NA,  # Will average over random effects
species = levels(m1_nb$species_4code_IBP)
)
# Create new data frame for prediction
newdata <- expand.grid(
year = seq(min(bird_territories_with_traits$year), max(bird_territories_with_traits$year), by=1),
sitecode = NA,  # Will average over random effects
species = levels(bird_territories_with_traits$species_4code_IBP)
)
# Predict
newdata$pred <- predict(m2, newdata = newdata, type="response")
gam.check(m1_nb)
summary(m1_nb)
plot(m1_nb, pages=1)
# Create a new data frame for prediction over a sequence of years
newdata <- data.frame(
year = seq(min(bird_territories_with_traits$year),
max(bird_territories_with_traits$year),
by = 1),
sitecode = NA,  # random effects set to NA to average over
species_4code_IBP = NA
)
# Predict abundance on the response scale
preds <- predict(m1_nb, newdata = newdata, type = "response", se.fit = TRUE)
# Add predictions and confidence intervals to newdata
newdata$fit <- preds$fit
newdata$se <- preds$se.fit
newdata$lower <- newdata$fit - 1.96 * newdata$se
newdata$upper <- newdata$fit + 1.96 * newdata$se
# Plot using ggplot2
ggplot(newdata, aes(x = year, y = fit)) +
geom_line(color = "blue", size = 1) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "blue", alpha = 0.3) +
labs(
title = "Predicted Bird Abundance Over Time",
x = "Year",
y = "Predicted Territories (Abundance)"
) +
theme_minimal()
str(bird_territories_with_traits)
bird_territories_with_traits$year <- as.numeric(bird_territories_with_traits$year)
bird_territories_with_traits$sitecode <- as.factor(bird_territories_with_traits$sitecode)
bird_territories_with_traits$species_4code_IBP <- as.factor(bird_territories_with_traits$species_4code_IBP)
m1_nb <- gam(territories ~ s(year, k=10) +
s(sitecode, bs="re") +
s(species_4code_IBP, bs="re"),
data = bird_territories_with_traits,
family = nb(link="log"),
method = "REML")
gam.check(m1_nb)
summary(m1_nb)
plot(m1_nb, pages=1)
# Create a new data frame for prediction over a sequence of years
newdata <- data.frame(
year = seq(min(bird_territories_with_traits$year),
max(bird_territories_with_traits$year),
by = 1),
sitecode = NA,  # random effects set to NA to average over
species_4code_IBP = NA
)
# Predict abundance on the response scale
preds <- predict(m1_nb, newdata = newdata, type = "response", se.fit = TRUE)
# Add predictions and confidence intervals to newdata
newdata$fit <- preds$fit
newdata$se <- preds$se.fit
newdata$lower <- newdata$fit - 1.96 * newdata$se
newdata$upper <- newdata$fit + 1.96 * newdata$se
# Plot using ggplot2
ggplot(newdata, aes(x = year, y = fit)) +
geom_line(color = "blue", size = 1) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "blue", alpha = 0.3) +
labs(
title = "Predicted Bird Abundance Over Time",
x = "Year",
y = "Predicted Territories (Abundance)"
) +
theme_minimal()
str(bird_territories_with_traits)
bird_territories_with_traits$year <- as.numeric(bird_territories_with_traits$year)
bird_territories_with_traits$sitecode <- as.factor(bird_territories_with_traits$sitecode)
bird_territories_with_traits$species_4code_IBP <- as.factor(bird_territories_with_traits$species_4code_IBP)
m1_nb <- gam(territories ~ s(year, k=10) +
s(sitecode, bs="re") +
s(species_4code_IBP, bs="re"),
data = bird_territories_with_traits,
family = nb(link="log"),
method = "REML")
gam.check(m1_nb)
summary(m1_nb)
plot(m1_nb, pages=1)
# Use actual factor levels (e.g., first site and first species)
first_site <- levels(bird_territories_with_traits$sitecode)[1]
first_species <- levels(bird_territories_with_traits$species_4code_IBP)[1]
# Create a new data frame for prediction
newdata <- data.frame(
year = seq(min(bird_territories_with_traits$year),
max(bird_territories_with_traits$year),
by = 1),
sitecode = factor(first_site, levels = levels(bird_territories_with_traits$sitecode)),
species_4code_IBP = factor(first_species, levels = levels(bird_territories_with_traits$species_4code_IBP))
)
# Predict on response scale
preds <- predict(m1_nb, newdata = newdata, type = "response", se.fit = TRUE)
# Add to newdata
newdata$fit <- preds$fit
newdata$se <- preds$se.fit
newdata$lower <- newdata$fit - 1.96 * newdata$se
newdata$upper <- newdata$fit + 1.96 * newdata$se
# Plot
ggplot(newdata, aes(x = year, y = fit)) +
geom_line(color = "blue", size = 1) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "blue", alpha = 0.3) +
labs(
title = paste("Predicted Abundance for", first_species, "at", first_site),
x = "Year",
y = "Predicted Territories (Abundance)"
) +
theme_minimal()
# Aggregate to get mean territories per year/species
agg <- bird_territories_with_traits %>%
group_by(year, species_4code_IBP) %>%
summarise(mean_territories = mean(territories, na.rm = TRUE), .groups = 'drop')
# Plot
ggplot(agg, aes(x = year, y = mean_territories)) +
geom_line() +
facet_wrap(~ species_4code_IBP, scales = "free_y") +
labs(y = "Mean Territories", x = "Year", title = "Raw Abundance Trends by Species") +
theme_minimal()
# Check and format variables
bird_territories_with_traits$year <- as.numeric(bird_territories_with_traits$year)
bird_territories_with_traits$sitecode <- as.factor(bird_territories_with_traits$sitecode)
bird_territories_with_traits$species_4code_IBP <- as.factor(bird_territories_with_traits$species_4code_IBP)
# Fit the GAMM
gamm_model <- gam(
territories ~ s(year, k = 10) +
s(sitecode, bs = "re") +
s(species_4code_IBP, bs = "re"),
data = bird_territories_with_traits,
family = nb(link = "log"),
method = "REML"
)
# Check the model
summary(gamm_model)
gam.check(gamm_model)
plot(gamm_model, pages = 1)
# Use the first level of sitecode and species to avoid NA predictions
first_site <- levels(bird_territories_with_traits$sitecode)[1]
first_species <- levels(bird_territories_with_traits$species_4code_IBP)[1]
# Create prediction data frame
newdata <- data.frame(
year = seq(min(bird_territories_with_traits$year), max(bird_territories_with_traits$year), by = 1),
sitecode = factor(first_site, levels = levels(bird_territories_with_traits$sitecode)),
species_4code_IBP = factor(first_species, levels = levels(bird_territories_with_traits$species_4code_IBP))
)
# Predict on response scale
pred <- predict(gamm_model, newdata = newdata, type = "response", se.fit = TRUE)
# Add predictions and CI to data frame
newdata$fit <- pred$fit
newdata$se <- pred$se.fit
newdata$lower <- newdata$fit - 1.96 * newdata$se
newdata$upper <- newdata$fit + 1.96 * newdata$se
# Plot with ggplot2
ggplot(newdata, aes(x = year, y = fit)) +
geom_line(color = "blue", size = 1.2) +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3, fill = "blue") +
labs(
title = paste("Predicted Abundance for", first_species, "at", first_site),
x = "Year",
y = "Predicted Territories"
) +
theme_minimal()
# Create prediction grid across all species and sites per year
newdata <- expand.grid(
year = seq(min(bird_territories_with_traits$year), max(bird_territories_with_traits$year), by = 1),
sitecode = levels(bird_territories_with_traits$sitecode),
species_4code_IBP = levels(bird_territories_with_traits$species_4code_IBP)
)
# Predict from full GAMM
preds <- predict(gamm_model, newdata = newdata, type = "response")
# Add to data
newdata$fit <- preds
# Average predicted abundance across all site/species combos per year
mean_preds <- newdata %>%
group_by(year) %>%
summarise(mean_pred = mean(fit), .groups = 'drop')
# Plot
ggplot(mean_preds, aes(x = year, y = mean_pred)) +
geom_line(color = "blue", size = 1.2) +
labs(
title = "Average Predicted Abundance Over Time (All Species & Sites)",
x = "Year",
y = "Mean Predicted Territories"
) +
theme_minimal()
# Summarize data: total abundance per year across all species and sites
abundance_by_year <- bird_territories_with_traits %>%
group_by(year) %>%
summarise(total_territories = sum(territories), .groups = 'drop')
# Fit a GAM to total abundance
gamm_total <- gam(total_territories ~ s(year, k = 10),
data = abundance_by_year,
family = nb(), method = "REML")
# Predict over time
newdata <- data.frame(year = seq(min(abundance_by_year$year),
max(abundance_by_year$year), by = 1))
preds <- predict(gamm_total, newdata = newdata, type = "response", se.fit = TRUE)
# Add predictions
newdata$fit <- preds$fit
newdata$se <- preds$se.fit
newdata$lower <- newdata$fit - 1.96 * newdata$se
newdata$upper <- newdata$fit + 1.96 * newdata$se
# Plot
ggplot(newdata, aes(x = year, y = fit)) +
geom_line(color = "darkgreen", size = 1.2) +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3, fill = "darkgreen") +
labs(title = "Total Bird Abundance Over Time (All Species, All Sites)",
x = "Year",
y = "Predicted Total Territories") +
theme_minimal()
# Plot
ggplot(mean_preds, aes(x = year, y = mean_pred)) +
geom_line(color = "blue", size = 1.2) +
labs(
title = "Average Predicted Abundance Over Time (All Species & Sites)",
x = "Year",
y = "Mean Predicted Territories"
) +
theme_minimal()
expand.grid(
year = full_year_range,
sitecode = levels(sitecode),
species = levels(species)
)
# Fit the GAMM
gamm_model <- gam(
territories ~ s(year, k = 10) +
s(sitecode, bs = "re") +
s(species_4code_IBP, bs = "re"),
data = bird_territories_with_traits,
family = nb(link = "log"),
method = "REML"
)
# Create prediction grid across all species and sites per year
newdata <- expand.grid(
year = seq(min(bird_territories_with_traits$year), max(bird_territories_with_traits$year), by = 1),
sitecode = levels(bird_territories_with_traits$sitecode),
species_4code_IBP = levels(bird_territories_with_traits$species_4code_IBP)
)
# Predict from full GAMM
preds <- predict(gamm_model, newdata = newdata, type = "response")
# Add to data
newdata$fit <- preds
# Average predicted abundance across all site/species combos per year
mean_preds <- newdata %>%
group_by(year) %>%
summarise(mean_pred = mean(fit), .groups = 'drop')
# Plot
ggplot(mean_preds, aes(x = year, y = mean_pred)) +
geom_line(color = "blue", size = 1.2) +
labs(
title = "Average Predicted Abundance Over Time (All Species & Sites)",
x = "Year",
y = "Mean Predicted Territories"
) +
theme_minimal()
expand.grid(
year = full_year_range,
sitecode = levels(sitecode),
species = levels(species)
)
# Optional: Calculate observed mean per year for reference (raw data)
observed <- bird_territories_with_traits %>%
group_by(year) %>%
summarise(mean_obs = mean(territories, na.rm = TRUE), .groups = "drop")
# Merge with model predictions
plot_data <- left_join(mean_preds, observed, by = "year")
# Plot
ggplot(plot_data, aes(x = year)) +
geom_line(aes(y = mean_pred), color = "#1f78b4", size = 1.5) +
geom_point(aes(y = mean_obs), color = "#33a02c", size = 2, shape = 21, fill = "white", stroke = 1) +
labs(
title = "GAMM-Predicted vs Observed Bird Abundance Over Time",
subtitle = "Mean predicted territories across all species and sites (blue line)\nObserved yearly means shown as green dots",
x = "Year",
y = "Mean Territories (Abundance)"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(size = 12),
axis.line = element_line(color = "black"),
panel.grid.minor = element_blank()
)
install.packages("gratia")
library(gratia)
# 1. Summary of smooth terms
smooths <- smooth_estimates(gamm_model)
# 2. Check basis dimension adequacy (k-index)
k_check <- k_check(gamm_model)  # returns a tibble
# 3. EDF, significance of smooth terms
draw(gamm_model)  # for nice diagnostic plots
# 2. Check basis dimension adequacy (k-index)
k_check <- k_check(gamm_model)  # returns a tibble
?k_check
??k_check
# 3. EDF, significance of smooth terms
draw(gamm_model)  # for nice diagnostic plots
print(k_check)
# Get tidy summary of model coefficients
model_summary <- tidy(gamm_model)
# Glance summary (AIC, deviance, etc.)
model_overview <- glance(gamm_model)
kable(model_summary, caption = "GAMM Summary (Coefficients)")
install.packages("broom")
library(broom)
# Get tidy summary of model coefficients
model_summary <- tidy(gamm_model)
# Glance summary (AIC, deviance, etc.)
model_overview <- glance(gamm_model)
kable(model_summary, caption = "GAMM Summary (Coefficients)")
kable(model_overview, caption = "GAMM Model Overview")
install.packages("knitr")  # install knitr if you haven't already
library(knitr)             # load knitr
kable(model_summary, caption = "GAMM Summary (Coefficients)")
kable(model_overview, caption = "GAMM Model Overview")
kable(model_overview, caption = "GAMM Model Overview")
tidy_gam <- tidy(gamm_model)
print(tidy_gam)
# Remove all existing data from the Environment with 'rm' function
rm(list = ls())  # remove all objects
# Identify the working directory for analyses
getwd() # view working directory filepath
# Check version of R for script
R.version.string # version R check
