geom_smooth(aes(group = nest_guild_BOTW))+
geom_point(aes(group = nest_guild_BOTW)) +
scale_x_continuous(limits = c(1991, 2021)) +  # Set x-axis range
labs(
title = paste("Trends for Species:", site),
x = "Year",
y = "Value",
color = "Species"
) +
theme_minimal()
})
# Run plot to visualize 100 unique plots with all species identified for all sites over time
territoryguild.plot
# Provide species data as function for split
territoryguild.data <- split(territoryguild.data, territoryguild.data$nest_guild_BOTW)
# Plot species territory abundance for each site over time
territoryguild.plot <- lapply(names(territoryguild.data), function(site) {
ggplot(territoryguild.data[[site]], aes(x = year, y = territories, color = nest_guild_BOTW)) +
geom_smooth(aes(group = nest_guild_BOTW))+
geom_point(aes(group = nest_guild_BOTW)) +
scale_x_continuous(limits = c(1991, 2021)) +  # Set x-axis range
labs(
title = paste("Trends for Species:", site),
x = "Year",
y = "Value",
color = "Species"
) +
theme_minimal()
})
# Run plot to visualize 100 unique plots with all species identified for all sites over time
territoryguild.plot
View(territoryguild.data)
# Join species information data "speciesdescription.data" with territory data for analyses
territoryguild.data <- full_join(territory.data, speciesdescription.data, by = c("speciescode"))
View(territoryguild.data)
# Provide species data as function for split
territoryguild.data <- split(territoryguild.data, territoryguild.data$nest_guild_BOTW)
# Plot species territory abundance for each site over time
territoryguild.plot <- lapply(names(territoryguild.data), function(site) {
ggplot(territoryguild.data[[site]], aes(x = year, y = territories, color = nest_guild_BOTW)) +
geom_smooth(aes(group = nest_guild_BOTW))+
geom_point(aes(group = nest_guild_BOTW)) +
scale_x_continuous(limits = c(1991, 2021)) +  # Set x-axis range
labs(
title = paste("Trends for Species:", site),
x = "Year",
y = "Value",
color = "Species"
) +
theme_minimal()
})
# Run plot to visualize 100 unique plots with all species identified for all sites over time
territoryguild.plot
# Import csv file of basic breeding bird census territory data
territory.data <- read.csv("LPBBC_territorydata.csv", header = T)
# Identify summary information from the data
summary(territory.data)
# Identify and review the column names for variables within the data
names(territory.data)
# Import csv file of complete breeding bird census territory data with all zeros
speciesdescription.data <- read.csv("LPBBC_speciesdescriptions.csv", header = T)
# Identify summary information from the data
summary(speciesdescription.data)
# Identify and review the column names for variables within the data
names(speciesdescription.data)
# Join species information data "speciesdescription.data" with territory data for analyses
territoryguild.data <- full_join(territory.data, speciesdescription.data, by = c("speciescode"))
# Provide species data as function for split
territoryguild.data <- split(territoryguild.data, territoryguild.data$nest_guild_BOTW)
# Plot species territory abundance for each site over time
territoryguild.plot <- lapply(names(territoryguild.data), function(site) {
ggplot(territoryguild.data[[site]], aes(x = year, y = territories, color = nest_guild_BOTW)) +
geom_smooth(aes(group = nest_guild_BOTW))+
geom_point(aes(group = nest_guild_BOTW)) +
scale_x_continuous(limits = c(1991, 2021)) +  # Set x-axis range
labs(
title = paste("Trends for Species:", site),
x = "Year",
y = "Value",
color = "Species"
) +
theme_minimal()
})
# Run plot to visualize 100 unique plots with all species identified for all sites over time
territoryguild.plot
# Review and identify some summary information about the data
summary(speciesdescription.data) # Summarize key information within the dataset
# Check R version and update script meta-data
R.version
# Clear environment prior to any analyses
rm(list=ls())
# Set or reset the working directory prior to any analyses
setwd("D:/RProj_LPBBC/Data_Analysis")
# Check working directory filepath has been selected correctly
getwd()
# Option B, load frequently required packages (alphabetically sorted), periodically review list of installed packages
library(ade4)
library(adespatial)
library(betareg)
library(brms)
library(data.table)
library(devtools)
library(dplyr)
library(effects)
library(emmeans)
library(ggalt)
library(ggConvexHull)
library(ggforce)
library(ggplot2)
library(ggpubr)
library(glmm)
library(gpboost)
library(grid)
library(lattice)
library(lme4)
library(lmtest)
library(memisc)
library(mgcv)
library(mvabund)
library(patchwork)
library(plot3D)
library(plyr)
library(RColorBrewer)
library(readr)
library(rgl)
library(rlist)
library(rstan)
library(rstatix)
library(scales)
library(scatterplot3d)
library(tibble)
library(tidyquant)
library(tidyr)
library(tidyverse)
library(vegan)
library(vegan3d)
# Check R version and update script meta-data
R.version
# Clear environment prior to any analyses
rm(list=ls())
# Set or reset the working directory prior to any analyses
setwd("D:/RProj_LPBBC/Data_Analysis")
# Check working directory filepath has been selected correctly
getwd()
# Option B, load frequently required packages (alphabetically sorted), periodically review list of installed packages
library(ade4)
library(adespatial)
library(betareg)
library(brms)
library(data.table)
library(devtools)
library(dplyr)
library(effects)
library(emmeans)
library(ggalt)
library(ggConvexHull)
library(ggforce)
library(ggplot2)
library(ggpubr)
library(glmm)
library(gpboost)
library(grid)
library(lattice)
library(lme4)
library(lmtest)
library(memisc)
library(mgcv)
library(mvabund)
library(patchwork)
library(plot3D)
library(plyr)
library(RColorBrewer)
library(readr)
library(rgl)
library(rlist)
library(rstan)
library(rstatix)
library(scales)
library(scatterplot3d)
library(tibble)
library(tidyquant)
library(tidyr)
library(tidyverse)
library(vegan)
library(vegan3d)
# Import csv file of complete breeding bird census territory data with all zeros
territory.data <- read.csv("bird_spterritories_presabs.csv", sep = ",", header = TRUE, quote = "",comment.char = "", stringsAsFactors = FALSE)
View(territory.data)
# Review and identify some summary information about the data
summary(territory.data) # Summarize key information within the dataset
names(territory.data) # Identify column names within the dataset
# Import csv file with supporting bird species descriptions
speciesdescription.data <- read.csv("bird_spcharacteristics.csv", sep = ",", header = TRUE, quote = "",comment.char = "", stringsAsFactors = FALSE)
# Import csv file with supporting bird species descriptions
speciesdescription.data <- read.csv("bird_spcharacteristics.csv", sep = ",", header = TRUE, quote = "",comment.char = "", stringsAsFactors = FALSE)
# Import csv file with supporting bird species descriptions
speciesdescription.data <- read.csv("bird_spcharacteristics.csv", header = TRUE)
# Import csv file of complete breeding bird census territory data with all zeros
territory.data <- read.csv("bird_spterritories_presabs.csv", header = TRUE)
# Review and identify some summary information about the data
summary(territory.data) # Summarize key information within the dataset
names(territory.data) # Identify column names within the dataset
# Import csv file with supporting bird species descriptions
speciesdescription.data <- read.csv("bird_spcharacteristics.csv", header = TRUE)
# Review and identify some summary information about the data
summary(speciesdescription.data) # Summarize key information within the dataset
names(speciesdescription.data) # Identify column names within the dataset
# Import csv file of complete breeding bird census territory data with all zeros
territory.data <- read.csv("bird_spterritories_presabs.csv", header = TRUE)
# Review and identify some summary information about the data
summary(territory.data) # Summarize key information within the dataset
names(territory.data) # Identify column names within the dataset
# Import csv file with supporting bird species descriptions
speciesdescription.data <- read.csv("bird_spcharacteristics.csv", header = TRUE)
# Review and identify some summary information about the data
summary(speciesdescription.data) # Summarize key information within the dataset
names(speciesdescription.data) # Identify column names within the dataset
# Join species information data "speciesdescription.data" with territory data for analyses
territoryguild.data <- full_join(territory.data, speciesdescription.data, by = c("speciescode"))
# Join species information data "speciesdescription.data" with territory data for analyses
territoryguild.data <- full_join(territory.data, speciesdescription.data, by = c("species_4code_IBP"))
View(territoryguild.data)
# Provide species data as function for split
territoryguild.data <- split(territoryguild.data, territoryguild.data$nest_guild_BOTW)
# Plot species territory abundance for each site over time
territoryguild.plot <- lapply(names(territoryguild.data), function(site) {
ggplot(territoryguild.data[[site]], aes(x = year, y = territories, color = nest_guild_BOTW)) +
geom_smooth(aes(group = nest_guild_BOTW))+
geom_point(aes(group = nest_guild_BOTW)) +
scale_x_continuous(limits = c(1991, 2021)) +  # Set x-axis range
labs(
title = paste("Trends for Species:", site),
x = "Year",
y = "Value",
color = "Species"
) +
theme_minimal()
})
# Run plot to visualize 100 unique plots with all species identified for all sites over time
territoryguild.plot
# Join species information data "speciesdescription.data" with territory data for analyses
territoryguild.data <- full_join(territory.data, speciesdescription.data, by = c("species_4code_IBP"))
# Provide species data as function for split
biome.data <- split(territoryguild.data, territoryguild.data$Breeding.Biome)
# Plot species territory abundance for each site over time
biome.plot <- lapply(names(territoryguild.data), function(site) {
ggplot(territoryguild.data[[site]], aes(x = year, y = territories, color = Breeding.Biome)) +
geom_smooth(aes(group = Breeding.Biome))+
geom_point(aes(group = Breeding.Biome)) +
scale_x_continuous(limits = c(1991, 2021)) +  # Set x-axis range
labs(
title = paste("Trends for Species:", site),
x = "Year",
y = "Value",
color = "Species"
) +
theme_minimal()
})
# Run plot to visualize 100 unique plots with all species identified for all sites over time
biome.plot
# Provide species data as function for split
biome.data <- split(territoryguild.data, territoryguild.data$Breeding.Biome)
View(biome.data)
# Plot species territory abundance for each site over time
biome.plot <- lapply(names(biome.data), function(site) {
ggplot(biome.data[[site]], aes(x = year, y = territories, color = Breeding.Biome)) +
geom_smooth(aes(group = Breeding.Biome))+
geom_point(aes(group = Breeding.Biome)) +
scale_x_continuous(limits = c(1991, 2021)) +  # Set x-axis range
labs(
title = paste("Trends for Species:", site),
x = "Year",
y = "Value",
color = "Species"
) +
theme_minimal()
})
# Run plot to visualize 100 unique plots with all species identified for all sites over time
biome.plot
# Import csv file of complete breeding bird census territory data with all zeros
birdabund.data <- read.csv("bird_spterritories_abund.csv", header = TRUE)
# Review and identify some summary information about the data
summary(birdabund.data) # Summarize key information within the dataset
names(birdabund.data) # Identify column names within the dataset
# Import csv file with supporting bird species descriptions
speciesdescription.data <- read.csv("bird_spcharacteristics.csv", header = TRUE)
# Review and identify some summary information about the data
summary(speciesdescription.data) # Summarize key information within the dataset
# Join species information data "speciesdescription.data" with territory data for analyses
territoryguild.data <- full_join(birdabund.data, speciesdescription.data, by = c("species_4code_IBP"))
# Join species information data "speciesdescription.data" with territory data for analyses
detailedbirdabund.data <- full_join(birdabund.data, speciesdescription.data, by = c("species_4code_IBP"))
# Provide species data as function for split
biome.data <- split(detailedbirdabund.data, detailedbirdabund.data$Breeding.Biome)
# Plot species territory abundance for each site over time
biome.plot <- lapply(names(biome.data), function(site) {
ggplot(biome.data[[site]], aes(x = year, y = territories, color = Breeding.Biome)) +
geom_smooth(aes(group = Breeding.Biome))+
geom_point(aes(group = Breeding.Biome)) +
scale_x_continuous(limits = c(1991, 2021)) +  # Set x-axis range
labs(
title = paste("Trends for Species:", site),
x = "Year",
y = "Value",
color = "Species"
) +
theme_minimal()
})
# Run plot to visualize 100 unique plots with all species identified for all sites over time
biome.plot
# Plot species territory abundance for each site over time
biome.plot <- lapply(names(biome.data), function(site) {
ggplot(biome.data[[site]], aes(x = year, y = territories, color = Breeding.Biome)) +
geom_smooth(aes(group = Breeding.Biome))+
geom_point(aes(group = Breeding.Biome)) +
facet_wrap(~ Breeding.Biome, scales = "free_y") +  # Create panels for each site, you can add "scales = "free_y" code to remove standard y-axis limits within plots
scale_x_continuous(limits = c(1991, 2021)) +  # Set x-axis range
labs(
title = paste("Trends for Species:", site),
x = "Year",
y = "Value",
color = "Species"
) +
theme_minimal()
})
# Run plot to visualize 100 unique plots with all species identified for all sites over time
biome.plot
names(speciesdescription.data) # Identify column names within the dataset
# Provide species data as function for split
family.data <- split(detailedbirdabund.data, detailedbirdabund.data$Family)
# Plot species territory abundance for each site over time
family.plot <- lapply(names(family.data), function(site) {
ggplot(family.data[[site]], aes(x = year, y = territories, color = Family)) +
geom_smooth(aes(group = Family))+
geom_point(aes(group = Family)) +
scale_x_continuous(limits = c(1991, 2021)) +  # Set x-axis range
labs(
title = paste("Trends for Species:", site),
x = "Year",
y = "Value",
color = "Species"
) +
theme_minimal()
})
# Run plot to visualize 7 unique plots with all species identified for all sites over time
family.plot
# Provide species data as function for split
group.data <- split(detailedbirdabund.data, detailedbirdabund.data$bird.group)
# Plot species territory abundance for each site over time
group.plot <- lapply(names(group.data), function(site) {
ggplot(group.data[[site]], aes(x = year, y = territories, color = bird.group)) +
geom_smooth(aes(group = bird.group))+
geom_point(aes(group = bird.group)) +
scale_x_continuous(limits = c(1991, 2021)) +  # Set x-axis range
labs(
title = paste("Trends for Species:", site),
x = "Year",
y = "Value",
color = "Species"
) +
theme_minimal()
})
# Run plot to visualize 7 unique plots with all species identified for all sites over time
group.plot
# Provide species data as function for split
group.data <- split(detailedbirdabund.data, detailedbirdabund.data$bird.group)
# Plot species territory abundance for each site over time
group.plot <- lapply(names(group.data), function(site) {
ggplot(group.data[[site]], aes(x = year, y = territories, color = bird.group)) +
geom_smooth(aes(group = bird.group))+
geom_point(aes(group = bird.group)) +
scale_x_continuous(limits = c(1991, 2021)) +  # Set x-axis range
labs(
title = paste("Trends for Species:", site),
x = "Year",
y = "Value",
color = "Species"
) +
theme_minimal()
})
# Run plot to visualize 7 unique plots with all species identified for all sites over time
group.plot
# Provide species data as function for split
migratory.data <- split(detailedbirdabund.data, detailedbirdabund.data$Migrate)
# Plot species territory abundance for each site over time
migrate.plot <- lapply(names(migratory.data), function(site) {
ggplot(migratory.data[[site]], aes(x = year, y = territories, color = Migrate)) +
geom_smooth(aes(group = Migrate))+
geom_point(aes(group = Migrate)) +
scale_x_continuous(limits = c(1991, 2021)) +  # Set x-axis range
labs(
title = paste("Trends for Species:", site),
x = "Year",
y = "Value",
color = "Species"
) +
theme_minimal()
})
# Run plot to visualize 7 unique plots with all species identified for all sites over time
migrate.plot
# Run plot to visualize 7 unique plots with all species identified for all sites over time
group.plot
# Run plot to visualize 35 unique plots with all species identified for all sites over time
family.plot
# Run plot to visualize 7 unique plots with all species identified for all sites over time
biome.plot
# Provide species data as function for split
BOTW.habguild.data <- split(detailedbirdabund.data, detailedbirdabund.data$habitat_guild_BOTW)
# Plot species territory abundance for each site over time
BOTW.habguild.plot <- lapply(names(BOTW.habguild.data), function(site) {
ggplot(BOTW.habguild.data[[site]], aes(x = year, y = territories, color = habitat_guild_BOTW)) +
geom_smooth(aes(group = habitat_guild_BOTW))+
geom_point(aes(group = habitat_guild_BOTW)) +
scale_x_continuous(limits = c(1991, 2021)) +  # Set x-axis range
labs(
title = paste("Trends for Species:", site),
x = "Year",
y = "Value",
color = "Species"
) +
theme_minimal()
})
# Run plot to visualize 3 unique plots with all species identified for all sites over time
BOTW.habguild.plot
# Provide species data as function for split
BOTW.fooditem.data <- split(detailedbirdabund.data, detailedbirdabund.data$food_item_BOTW)
# Plot species territory abundance for each site over time
BOTW.fooditem.plot <- lapply(names(BOTW.fooditem.data), function(site) {
ggplot(BOTW.fooditem.data[[site]], aes(x = year, y = territories, color = food_item_BOTW)) +
geom_smooth(aes(group = food_item_BOTW))+
geom_point(aes(group = food_item_BOTW)) +
scale_x_continuous(limits = c(1991, 2021)) +  # Set x-axis range
labs(
title = paste("Trends for Species:", site),
x = "Year",
y = "Value",
color = "Species"
) +
theme_minimal()
})
# Run plot to visualize 9 unique plots with all species identified for all sites over time
BOTW.fooditem.plot
# Provide species data as function for split
BOTW.nestguild.data <- split(detailedbirdabund.data, detailedbirdabund.data$nest_guild_BOTW)
# Plot species territory abundance for each site over time
BOTW.nestguild.plot <- lapply(names(BOTW.nestguild.data), function(site) {
ggplot(BOTW.nestguild.data[[site]], aes(x = year, y = territories, color = nest_guild_BOTW)) +
geom_smooth(aes(group = nest_guild_BOTW))+
geom_point(aes(group = nest_guild_BOTW)) +
scale_x_continuous(limits = c(1991, 2021)) +  # Set x-axis range
labs(
title = paste("Trends for Species:", site),
x = "Year",
y = "Value",
color = "Species"
) +
theme_minimal()
})
# Run plot to visualize 11 unique plots with all species identified for all sites over time
BOTW.nestguild.plot
# Check R version and update script meta-data
R.version
# Clear environment prior to any analyses
rm(list=ls())
# Set or reset the working directory prior to any analyses
setwd("D:/R/PhD_UWaterloo")
# Check working directory filepath has been selected correctly
getwd()
# Load required packages (Alphabetically sorted)
# Option B*
library(ade4)
library(adespatial)
library(betareg)
library(brms)
library(data.table)
library(devtools)
library(dplyr)
library(effects)
library(emmeans)
library(ggalt)
library(ggConvexHull)
library(ggforce)
library(ggplot2)
library(ggpubr)
library(glmm)
library(gpboost)
library(grid)
library(lattice)
library(lme4)
library(lmtest)
library(memisc)
library(mgcv)
library(mvabund)
library(patchwork)
library(plot3D)
library(plyr)
library(RColorBrewer)
library(readr)
library(rgl)
library(rlist)
library(rstan)
library(rstatix)
library(scales)
library(scatterplot3d)
library(tibble)
library(tidyquant)
library(tidyr)
library(tidyverse)
library(vegan)
library(vegan3d)
# Import csv file of basic breeding bird census territory data
base.bird.data <- read.csv("base_bird_data.csv", header = T)
